pipeline {
    agent any

    environment {
        // NETLIFY_TOKEN = credentials('NETLIFY_TOKEN')
        SITE_ID = credentials('SITE_ID')
    }

    stages {
        stage('Build') {
            agent {
                docker {
                    image "node:20-alpine"
                    args '-t'
                    // Removed 'reuseNode true' to prevent file permission conflicts.
                }
            }
    
            steps {
                script {
                    dir('02_react_jenkins_app') {
                        sh '''
                        echo "Starting the Build process"
                        npm --version
                        node --version
    
                        # This is the new command to set the npm cache to a local, writable directory.
                        # It solves the EACCES (permission denied) error.
                        npm config set cache .npm-cache --location=project
    
                        echo "Listing files before node packages install"
                        ls -la
    
                        # Clean the local cache and remove node_modules to ensure a fresh install
                        npm cache clean --force
                        rm -rf node_modules
    
                        ls -la
    
                        echo "Started node packages install"
                        npm install
                        
    
                        echo "Starting the build..."

                        npm run build

                        echo "Build completed"
                        ls -la

                        
                        '''
                    }
                }
            }
        }

        stage('Test') {
            agent {
                docker {
                    image "node:20-alpine"
                    args '-t'
                    // Removed 'reuseNode true' to prevent file permission conflicts.
                }
            }

            steps {
                script {
                    dir('02_react_jenkins_app') {
                        sh '''
                            echo "Checking Build..."
                            test -f dist/index.html

                            echo "Starting tests..."
                            npm run test
                        '''
                    }
                }
            }
        }

        stage('Deploy') {
             agent {
                docker {
                    image "node:20-alpine"
                    args '-t'
                    // Removed 'reuseNode true' to prevent file permission conflicts.
                }
            }

            steps {
                script {
                    dir('02_react_jenkins_app') {
                        withCredentials([string(credentialsId: 'netlify-api-token', variable: 'NETLIFY_TOKEN')]) {
                            sh '''
                                echo "Starting the deployment process..."

                                npm install archiver

                                echo "Checking if Build exists..."
                                test -f dist/index.html

                                # This will zip the build for future use
                                node dirzip.js
                                
                                curl -H "Authorization: Bearer $NETLIFY_TOKEN" \
                                     -H "Content-Type: application/zip" \
                                     --data-binary "@dist.zip" \
                                     https://api.netlify.com/api/v1/sites/$SITE_ID/deploys


                                echo "Deployment Success"
                            '''
                        }
                        
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                dir('02_react_jenkins_app') {
                    junit 'test-results/junit.xml'
                }
            }
            echo "Pipeline finished!"
        }
    }

}
